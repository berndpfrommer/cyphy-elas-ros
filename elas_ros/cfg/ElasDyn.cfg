#!/usr/bin/env python2
PACKAGE = "elas_ros"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("disp_min", int_t, 0, "min disparity", 0,   0, 255)
gen.add("disp_max", int_t, 0, "max disparity", 255, 0, 255)
gen.add("support_threshold", double_t, 0, "max uniqueness ratio cost(best)/cost(2nd) support match", 0.85, 0, 1)
gen.add("support_texture", int_t, 0, "min texture for support points (brightness level)", 10, 0, 255)
gen.add("candidate_stepsize", int_t, 0, "step size for regular grid on which support points are matched", 10, 0, 255)
gen.add("incon_window_size", int_t, 0, "window size of inconsistent support point check", 5, 0, 255)
gen.add("incon_threshold", int_t, 0, "disparity sim threshold for s-points to be considered consistent", 5, 0, 255)
gen.add("incon_min_support", int_t, 0, "minimum number of consistent support points", 5, 0, 255)
gen.add("add_corners", bool_t, 0, "add support points at image corners",  False)
gen.add("grid_size", int_t, 0, "size of neighborhood for additional support point extrap.", 20, 1, 255)
gen.add("beta", double_t, 0, "image likelihood parameter", 0.02, 0, 1)
gen.add("gamma", double_t, 0, "prior constant",3,0,10)
gen.add("sigma", double_t, 0, "prior sigma",1,0,10)
gen.add("sradius", double_t, 0,"prior sigma radius",2,0,10)
gen.add("match_texture", int_t, 0,"min texture for dense matching",1,0,10)
gen.add("lr_threshold", int_t, 0,"disparity threshold for left/right consistency check",2,0,10)
gen.add("speckle_sim_threshold", double_t, 0,"similarity threshold for speckle segmentation",1,0,10)
gen.add("speckle_size", int_t, 0,"maximal size of a speckle (small speckles get removed)",200,0,1000)
gen.add("ipol_gap_width", int_t, 0,"interpolate small gaps (left<->right, top<->bottom)",3,0,10)
gen.add("filter_median",     bool_t, 0,"optional median filter (approximated)", False)
gen.add("filter_adaptive_mean",     bool_t, 0,"optional adaptive mean filter (approximated)", True)
gen.add("postprocess_only_left",     bool_t, 0,"saves time by not postprocessing the right image", True)
gen.add("subsampling",     bool_t, 0,"saves time by only computing disparities for each 2nd pixel", False)


exit(gen.generate(PACKAGE, "elas_ros", "ElasDyn"))
